import { AbstractConfigProvider } from './AbstractConfigProvider';
import { ResourceInfo } from '../types';
/**
 * Local config provider - used when running local kapeta clusters during development and testing.
 *
 * @implements {ConfigProvider}
 */
export declare class LocalConfigProvider extends AbstractConfigProvider {
    private _configuration;
    /**
     *
     * @param {string} blockRef
     * @param {string} systemId
     * @param {string} instanceId
     * @param {BlockDefinition} blockDefinition
     * @return {Promise<LocalConfigProvider>}
     */
    static create(blockRef: string, systemId: string, instanceId: string, blockDefinition: object): Promise<LocalConfigProvider>;
    constructor(blockRef: string, systemId: string, instanceId: string, blockDefinition: object);
    /**
     * Resolve and verify system and instance id
     * @returns {Promise<void>}
     */
    resolveIdentity(): Promise<void>;
    loadConfiguration(): Promise<void>;
    /**
     * Get port to listen on for current instance
     *
     */
    getServerPort(portType?: string): Promise<string>;
    getServerHost(): Promise<string>;
    /**
     * Register instance with cluster service
     */
    registerInstance(instanceHealthPath: string, portType?: string): Promise<void>;
    instanceStopped(): Promise<unknown>;
    getServiceAddress(resourceName: string, portType: string): Promise<string | null>;
    getResourceInfo(resourceType: string, portType: string, resourceName: string): Promise<ResourceInfo | null>;
    getInstanceHost(instanceId: string): Promise<string | null>;
    getInstanceConfig(): Promise<any>;
    load(): Promise<void>;
    getProviderId(): string;
    getClusterConfig(): import("@kapeta/local-cluster-config").ClusterConfig;
    getClusterServiceBaseUrl(): string;
    private getInstanceUrl;
    private getInstanceConfigUrl;
    private getConfigBaseUrl;
    private getProviderPortUrl;
    private getServiceClientUrl;
    private getResourceInfoUrl;
    private getInstanceHostUrl;
    private getIdentityUrl;
    private encode;
    /**
     * Send GET HTTP request to url
     */
    private _sendGET;
    /**
     * Send GET HTTP request to url
     */
    private _sendRequest;
    getConfiguration<T>(path: string, defaultValue?: T): T;
}
