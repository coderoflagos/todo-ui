import { ConfigProvider, ResourceInfo } from '../types';
/**
 * Base class for config providers
 *
 */
export declare abstract class AbstractConfigProvider implements ConfigProvider {
    private readonly _blockRef;
    private readonly _blockDefinition;
    private _systemId;
    private _instanceId;
    constructor(blockRef: string, systemId: string, instanceId: string, blockDefinition: object);
    getBlockDefinition(): object;
    getBlockReference(): any;
    getSystemId(): string;
    getInstanceId(): string;
    setIdentity(systemId: string, instanceId: string): void;
    abstract getConfiguration<T>(path: string, defaultValue?: T): T | undefined;
    abstract getInstanceHost(instanceId: string): Promise<string | null>;
    abstract getProviderId(): string;
    abstract getResourceInfo(resourceType: string, portType: string, resourceName: string): Promise<ResourceInfo | null>;
    abstract getServerHost(): Promise<string>;
    abstract getServerPort(portType?: string): Promise<string>;
    abstract getServiceAddress(serviceName: string, portType: string): Promise<string | null>;
}
