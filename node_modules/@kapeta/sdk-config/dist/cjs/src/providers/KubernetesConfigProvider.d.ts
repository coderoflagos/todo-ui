import { AbstractConfigProvider } from './AbstractConfigProvider';
import { ResourceInfo } from '../types';
/**
 * Kubernetes config provider - used when running kapeta clusters within kubernetes
 *
 * @implements {ConfigProvider}
 */
export declare class KubernetesConfigProvider extends AbstractConfigProvider {
    private _configuration;
    private _instanceHosts;
    /**
     *
     * @param {string} blockRef
     * @param {string} systemId
     * @param {string} instanceId
     * @param {BlockDefinition} blockDefinition
     * @return {Promise<KubernetesConfigProvider>}
     */
    static create(blockRef: string, systemId: string, instanceId: string, blockDefinition: object): Promise<KubernetesConfigProvider>;
    constructor(blockRef: string, systemId: string, instanceId: string, blockDefinition: object);
    /**
     * Get port to listen on for current instance
     *
     */
    getServerPort(portType?: string): Promise<string>;
    getServerHost(): Promise<string>;
    getServiceAddress(resourceName: string, portType: string): Promise<string>;
    getResourceInfo(resourceType: string, portType: string, resourceName: string): Promise<ResourceInfo>;
    getProviderId(): string;
    getConfiguration<T>(path: string, defaultValue?: T): T | undefined;
    getInstanceHost(instanceId: string): Promise<string>;
}
