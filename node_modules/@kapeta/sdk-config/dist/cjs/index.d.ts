import { ConfigProvider } from './src/types';
declare class Config {
    /**
     * Provide callback for when configuration is ready.
     *
     */
    static onReady(callback: (provider: ConfigProvider) => {}): void;
    static isReady(): boolean;
    /**
     * Get provider - if not ready, will throw an error
     */
    static getProvider(): ConfigProvider;
    /**
     * Get configuration value
     */
    static get<T>(path: string, defaultValue?: T): T | undefined;
    static getAsInstanceHost(path: string, defaultValue?: string): Promise<string | null>;
    /**
     * Get hostname and port for instance
     */
    static getInstanceHost(instanceId: string): Promise<string | null>;
    /**
     * Inits and loads config provider
     */
    static init(blockDir: string, healthEndpoint: string, portType?: string): Promise<ConfigProvider>;
}
export * from './src/types';
export * from './src/providers/AbstractConfigProvider';
export * from './src/providers/LocalConfigProvider';
export * from './src/providers/KubernetesConfigProvider';
export default Config;
