export type DockerConfig = {
    socketPath: string;
} | {
    protocol?: 'https' | 'http' | 'ssh';
    host?: string;
    port?: number;
};
export type RemoteServices = {
    [key: string]: string;
};
export interface Definition {
    kind: string;
    metadata: {
        name: string;
        [key: string]: any;
    };
    spec?: any;
}
export interface DefinitionInfo {
    ymlPath: string;
    path: string;
    version: string;
    definition: Definition;
    hasWeb: boolean;
}
export interface ClusterConfig {
    cluster?: {
        host?: string;
        port?: string;
        [key: string]: any;
    };
    [key: string]: any;
}
export declare class ClusterConfiguration {
    private _clusterConfig?;
    getClusterServicePort(): string;
    getClusterServiceHost(): string;
    /**
     * User configured docker connection information
     */
    getDockerConfig(): DockerConfig;
    getRemoteServices(): RemoteServices;
    getRemoteService(name: string, defaultValue?: string): string;
    getKapetaBasedir(): string;
    getAuthenticationPath(): string;
    /**
     * Gets the base directory of a provider
     * @return {string}
     */
    getRepositoryBasedir(): string;
    getRepositoryAssetPath(handle: string, name: string, version: string): string;
    getRepositoryAssetInfoPath(handle: string, name: string, version: string): {
        baseDir: string;
        assetFile: string;
        versionFile: string;
    };
    /**
     * Gets an array of all provider definitions along with their paths
     *
     * @param [kindFilter] {string|string[]} if provided will only return definitions of this kind
     * @return {{ymlPath:string,path:string,version:string,hasWeb:boolean,definition:{}}[]}
     */
    getProviderDefinitions(kindFilter?: string | string[]): DefinitionInfo[];
    /**
     * Gets an array of all definitions along with their paths from the local repository
     */
    getDefinitions(kindFilter?: string | string[]): DefinitionInfo[];
    getClusterConfigFile(): string;
    getClusterConfig(): ClusterConfig;
    getClusterServiceAddress(): string;
}
