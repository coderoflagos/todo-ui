"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProxyRoute = void 0;
const path_1 = __importDefault(require("path"));
const express_1 = __importDefault(require("express"));
const express_http_proxy_1 = __importDefault(require("express-http-proxy"));
const sdk_config_1 = __importDefault(require("@kapeta/sdk-config"));
const DEFAULT_SERVICE_TYPE = 'web';
class ProxyRoute {
    constructor(name, path, serviceType) {
        this._name = name;
        this._path = path;
        this._serviceType = serviceType ?? DEFAULT_SERVICE_TYPE;
        this._targetUrl = `http://${name.toLowerCase()}`;
        this._ready = false;
        this._router = express_1.default.Router();
        sdk_config_1.default.onReady(async (provider) => {
            await this.init(provider);
        });
    }
    /**
     * Called automatically during startup sequence.
     *
     * @param {ConfigProvider} provider
     * @return {Promise<void>}
     */
    async init(provider) {
        this._targetUrl = await provider.getServiceAddress(this._name, this._serviceType);
        this._ready = true;
        if (!this._targetUrl.endsWith('/')) {
            this._targetUrl += '/';
        }
        const urlParts = new URL(this._targetUrl);
        this._router.use(this._path, (0, express_http_proxy_1.default)(urlParts.host, {
            https: urlParts.protocol === 'https',
            proxyReqPathResolver: function (req) {
                const [path, query] = req.url.split('?');
                return path_1.default.join(urlParts.pathname, path) + (query ? '?' + query : '');
            },
        }));
        console.log('Proxy route ready for %s. %s --> %s', this._name, this._path, this._targetUrl);
    }
    /**
     * Returns expressjs Router object that contains proxy
     */
    toExpressRoute() {
        return this._router;
    }
}
exports.ProxyRoute = ProxyRoute;
