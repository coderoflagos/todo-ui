"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyWebpackHandlers = void 0;
const express_1 = __importDefault(require("express"));
const fs_1 = __importDefault(require("fs"));
const Path = __importStar(require("path"));
function normalizeAssets(assets) {
    if (!Array.isArray(assets)) {
        return Object.values(assets);
    }
    return Array.isArray(assets) ? assets : [assets];
}
function allEntries(assetsByChunkName) {
    const out = [];
    Object.values(assetsByChunkName).forEach(assets => {
        out.push(...normalizeAssets(assets));
    });
    return out;
}
const renderHTMLPage = ({ baseUrl, head, body }) => {
    return `<html>
              <head>
                <meta charset="utf-8" />
                <base href="${baseUrl}" />
                ${head}
              </head>
              <body>
                ${body}
              </body>
            </html>`;
};
const applyWebpackHandlers = (distFolder, webpackConfig, app) => {
    const devMode = !!(process.env.NODE_ENV &&
        process.env.NODE_ENV.toLowerCase() === "development");
    if (devMode) {
        /* eslint-disable */
        console.log("Serving development version");
        const webpack = require("webpack");
        const webpackDevMiddleware = require("webpack-dev-middleware");
        const compiler = webpack(webpackConfig);
        app.use("/", webpackDevMiddleware(compiler, {
            publicPath: "",
            serverSideRender: true,
        }));
        app.use(require("webpack-hot-middleware")(compiler));
        app.get('/*', (req, res) => {
            const { devMiddleware } = res.locals.webpack;
            const outputFileSystem = devMiddleware.outputFileSystem;
            const jsonWebpackStats = devMiddleware.stats.toJson();
            const { assetsByChunkName, outputPath } = jsonWebpackStats;
            const baseUrl = req.query._kap_basepath ? req.query._kap_basepath : '/';
            res.send(renderHTMLPage({
                baseUrl,
                head: `<style>
                            ${allEntries(assetsByChunkName)
                    .filter((path) => path.endsWith(".css") && !path.endsWith(".hot-update.css"))
                    .map((path) => outputFileSystem.readFileSync(path.join(outputPath, path)))
                    .join("\n")}
                            </style>`,
                body: allEntries(assetsByChunkName)
                    .filter((path) => path.endsWith(".js") && !path.endsWith(".hot-update.js"))
                    .map((path) => `<script src="${path}"></script>`)
                    .join("\n")
            }));
        });
        /* eslint-enable */
    }
    else {
        console.log("Serving production version");
        if (!fs_1.default.existsSync(distFolder)) {
            console.error("Distribution folder (%s) is missing - did you remember to build before running?", distFolder);
            process.exit(1);
        }
        const assetsDataFile = Path.join(distFolder, 'assets.json');
        if (!fs_1.default.existsSync(assetsDataFile)) {
            console.error("Assets information (%s) is missing - did you remember to build before running?", assetsDataFile);
            process.exit(1);
        }
        const assets = JSON.parse(fs_1.default.readFileSync(assetsDataFile).toString());
        app.use(express_1.default.static(distFolder));
        app.get('/*', (req, res) => {
            const baseUrl = req.query._kap_basepath ? req.query._kap_basepath : '/';
            res.send(renderHTMLPage({
                baseUrl,
                head: allEntries(assets)
                    .filter((path) => path.endsWith(".css"))
                    .map((path) => `<link rel="stylesheet" href="${path}" >`)
                    .join("\n"),
                body: allEntries(assets)
                    .filter((path) => path.endsWith(".js") && !path.endsWith(".hot-update.js"))
                    .map((path) => `<script src="${path}"></script>`)
                    .join("\n")
            }));
        });
    }
};
exports.applyWebpackHandlers = applyWebpackHandlers;
