type RequestArgumentTransport = 'path' | 'header' | 'body' | 'query' | 'PATH' | 'HEADER' | 'BODY' | 'QUERY';
type RequestMethod = 'GET' | 'POST' | 'DELETE' | 'PATCH' | 'PUT' | 'OPTIONS' | 'HEAD' | 'TRACE' | 'CONNECT' | 'LINK' | 'UNLINK' | 'COPY' | 'PURGE' | 'LOCK' | 'UNLOCK' | 'PROPFIND' | 'VIEW';
export interface RequestArgument {
    name: string;
    value: any;
    transport: RequestArgumentTransport;
}
export declare class RestError extends Error {
    readonly response: Response;
    readonly statusCode: number;
    constructor(error: string, response: Response);
}
export declare class RestClient {
    private readonly _baseUrl;
    /**
     * Initialise rest client
     *
     * @param {string} baseUrl
     */
    constructor(baseUrl: string);
    /**
     * Executes a request to the specified path using the specified method.
     *
     * @param {RequestMethod} method The HTTP method to use for the request.
     * @param {string} path The path of the resource to request.
     * @param {RequestArgument[]} requestArguments An array of request arguments.
     * @return {Promise<ReturnData | null>} The result of the request, or null if the response status is 404.
     */
    execute<ReturnData = any>(method: RequestMethod, path: string, requestArguments?: RequestArgument[]): Promise<ReturnData | null>;
}
export {};
