"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RestClient = exports.RestError = void 0;
const sdk_config_1 = __importDefault(require("@kapeta/sdk-config"));
const request_1 = __importDefault(require("request"));
const SERVICE_TYPE = 'rest';
class RestError extends Error {
    constructor(error, response) {
        super(error);
        this.response = response;
        this.statusCode = response.statusCode;
    }
}
exports.RestError = RestError;
const JSONStringifyReplacer = function (key, value) {
    if (this[key] instanceof Date) {
        return this[key].getTime();
    }
    return value;
};
class RestClient {
    /**
     * Initialise rest client for service.
     *
     * @param {string} resourceName
     */
    constructor(resourceName) {
        this._ready = false;
        this._resourceName = resourceName;
        this._baseUrl = `http://${resourceName.toLowerCase()}`;
        sdk_config_1.default.onReady(async (provider) => {
            await this.init(provider);
        });
    }
    /**
     * Called automatically during startup sequence.
     *
     * @param {ConfigProvider} provider
     * @return {Promise<void>}
     */
    async init(provider) {
        this._baseUrl = await provider.getServiceAddress(this._resourceName, SERVICE_TYPE);
        this._ready = true;
        if (!this._baseUrl.endsWith('/')) {
            this._baseUrl += '/';
        }
        console.log('REST client ready for %s --> %s', this._resourceName, this._baseUrl);
    }
    /**
     * Executes a request to the specified path using the specified method.
     *
     * @param {RequestMethod} method - The HTTP request method to use for the request.
     * @param {string} path - The path of the resource to request.
     * @param {RequestArgument[]} requestArguments - The array of request arguments.
     * @returns {Promise<ReturnType | null>} The result of the request, or null if the response status is 404.
     */
    execute(method, path, requestArguments) {
        if (!this._ready) {
            throw new Error('Client not ready yet');
        }
        while (path.startsWith('/')) {
            path = path.substring(1);
        }
        const url = this._baseUrl + path;
        const query = [];
        const opts = {
            method,
            url,
            headers: {},
        };
        requestArguments.forEach((requestArgument) => {
            const transport = requestArgument.transport?.toLowerCase();
            switch (transport) {
                case 'path':
                    opts.url = opts.url.replace('{' + requestArgument.name + '}', requestArgument.value);
                    break;
                case 'header':
                    opts.headers[requestArgument.name] = requestArgument.value;
                    break;
                case 'body':
                    if (!opts.headers['content-type']) {
                        opts.headers['content-type'] = 'application/json';
                    }
                    opts.body = JSON.stringify(requestArgument.value, JSONStringifyReplacer);
                    break;
                case 'query':
                    query.push(encodeURIComponent(requestArgument.name) + '=' + encodeURIComponent(requestArgument.value));
                    break;
                default:
                    transport;
                    throw new Error('Unknown argument transport: ' + requestArgument.transport);
            }
        });
        if (query.length > 0) {
            opts.url += '?' + query.join('&');
        }
        return new Promise((resolve, reject) => {
            (0, request_1.default)(opts, function (err, response, body) {
                if (err) {
                    reject(err);
                    return;
                }
                if (typeof body === 'string' &&
                    response.headers['content-type'] &&
                    response.headers['content-type']?.startsWith('application/json')) {
                    try {
                        body = JSON.parse(body);
                    }
                    catch (e) {
                        // Ignore
                    }
                }
                if (response.statusCode > 399 && response.statusCode !== 404) {
                    reject(new RestError(body.error || 'Unknown error', response));
                    return;
                }
                if (response.statusCode === 404) {
                    resolve(null);
                    return;
                }
                resolve(body);
            });
        });
    }
}
exports.RestClient = RestClient;
