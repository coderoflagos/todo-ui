import { ConfigProvider } from '@kapeta/sdk-config';
import Request, { Response } from 'request';
type RequestArgumentTransport = 'path' | 'header' | 'body' | 'query' | 'PATH' | 'HEADER' | 'BODY' | 'QUERY';
type RequestMethod = 'GET' | 'POST' | 'DELETE' | 'PATCH' | 'PUT' | 'OPTIONS' | 'HEAD' | 'TRACE' | 'CONNECT' | 'LINK' | 'UNLINK' | 'COPY' | 'PURGE' | 'LOCK' | 'UNLOCK' | 'PROPFIND' | 'VIEW';
export interface RequestArgument {
    name: string;
    value: any;
    transport: RequestArgumentTransport;
}
export interface RequestOptions {
    headers: {
        [key: string]: string;
    };
    body?: any;
    method: RequestMethod;
    url: string;
}
export interface Result {
    response: Request.Response;
    body: any;
}
export declare class RestError extends Error {
    readonly response: Response;
    readonly statusCode: number;
    constructor(error: string, response: Response);
}
export declare class RestClient {
    private readonly _resourceName;
    private _ready;
    private _baseUrl;
    /**
     * Initialise rest client for service.
     *
     * @param {string} resourceName
     */
    constructor(resourceName: string);
    /**
     * Called automatically during startup sequence.
     *
     * @param {ConfigProvider} provider
     * @return {Promise<void>}
     */
    init(provider: ConfigProvider): Promise<void>;
    /**
     * Executes a request to the specified path using the specified method.
     *
     * @param {RequestMethod} method - The HTTP request method to use for the request.
     * @param {string} path - The path of the resource to request.
     * @param {RequestArgument[]} requestArguments - The array of request arguments.
     * @returns {Promise<ReturnType | null>} The result of the request, or null if the response status is 404.
     */
    execute<ReturnType = any>(method: RequestMethod, path: string, requestArguments: RequestArgument[]): Promise<ReturnType | null>;
}
export {};
